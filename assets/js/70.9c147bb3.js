(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{659:function(t,e,a){"use strict";a.r(e);var i=a(15),o=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("En el dinámico mundo del desarrollo de software, un pilar esencial para la eficiencia, la calidad y la colaboración es el "),a("strong",[t._v("Control de Versiones")]),t._v(". Un sistema de control de versiones registra los cambios realizados en un conjunto de archivos a lo largo del tiempo, permitiendo a los desarrolladores recuperar versiones específicas de sus proyectos, rastrear la evolución del software y coordinar el trabajo de múltiples personas en archivos compartidos.")]),t._v(" "),a("p",[t._v("Este tema explora en profundidad cómo "),a("strong",[t._v("Git")]),t._v(" y "),a("strong",[t._v("GitHub")]),t._v(" han revolucionado la gestión de proyectos, desde los conceptos fundamentales hasta los comandos esenciales para optimizar tu flujo de trabajo.")]),t._v(" "),a("h2",{attrs:{id:"_1-fundamentos-git-y-conceptos-clave"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-fundamentos-git-y-conceptos-clave"}},[t._v("#")]),t._v(" 1. Fundamentos: Git y Conceptos Clave")]),t._v(" "),a("h3",{attrs:{id:"_1-1-¿que-es-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-¿que-es-git"}},[t._v("#")]),t._v(" 1.1. ¿Qué es Git?")]),t._v(" "),a("p",[a("strong",[t._v("Git")]),t._v(" es un "),a("em",[t._v("software")]),t._v(" de control de versiones "),a("strong",[t._v("distribuido")]),t._v(" (DVCS), creado por Linus Torvalds en 2005. A diferencia de los sistemas centralizados, Git proporciona a cada desarrollador una "),a("strong",[t._v("copia local completa")]),t._v(" del historial de desarrollo del proyecto. Esta naturaleza distribuida fomenta el desarrollo no lineal y agiliza la gestión de ramas y la fusión de diferentes versiones del código.")]),t._v(" "),a("h3",{attrs:{id:"_1-2-el-ciclo-de-vida-y-los-estados-de-un-archivo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-el-ciclo-de-vida-y-los-estados-de-un-archivo"}},[t._v("#")]),t._v(" 1.2. El Ciclo de Vida y los Estados de un Archivo")]),t._v(" "),a("p",[t._v("El flujo de trabajo básico en Git sigue una secuencia lógica de tres etapas:")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("Modificar")]),t._v(": Se realizan cambios en el "),a("strong",[t._v("Directorio de Trabajo")]),t._v(" (la copia de los archivos en tu máquina local).")]),t._v(" "),a("li",[a("strong",[t._v("Preparar ("),a("code",[t._v("Staged")]),t._v(")")]),t._v(": Los archivos modificados se añaden al "),a("strong",[t._v("Área de Preparación ("),a("code",[t._v("Staging Area")]),t._v(" o "),a("code",[t._v("Index")]),t._v(")")]),t._v(", que es la zona intermedia donde se seleccionan los cambios que se incluirán en el próximo "),a("em",[t._v("commit")]),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("Confirmar ("),a("code",[t._v("Committed")]),t._v(")")]),t._v(": Se realiza un "),a("code",[t._v("commit")]),t._v(", que almacena la instantánea de los archivos preparados de forma permanente en el "),a("strong",[t._v("Repositorio Local")]),t._v(".")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Concepto Clave")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Descripción")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("Repositorio (Repository)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Almacena todos los datos y el historial completo de cambios del proyecto.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("Commit (Confirmación)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('Una "instantánea" del proyecto en un momento específico, identificada por un código '),a("em",[t._v("hash")]),t._v(" SHA-1 único y con un mensaje descriptivo.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("Rama (Branch)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Una línea de desarrollo independiente, que permite trabajar en nuevas funcionalidades o correcciones sin afectar el código principal ("),a("code",[t._v("master")]),t._v(" o "),a("code",[t._v("main")]),t._v(").")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("HEAD")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("El puntero al último "),a("code",[t._v("commit")]),t._v(" realizado en la rama actual.")])])])]),t._v(" "),a("h2",{attrs:{id:"_2-comandos-esenciales-de-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-comandos-esenciales-de-git"}},[t._v("#")]),t._v(" 2. Comandos Esenciales de Git")]),t._v(" "),a("p",[t._v("Dominar Git pasa por conocer los comandos de uso más frecuente:")]),t._v(" "),a("h3",{attrs:{id:"_2-1-configuracion-inicializacion-y-clonacion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-configuracion-inicializacion-y-clonacion"}},[t._v("#")]),t._v(" 2.1. Configuración, Inicialización y Clonación")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Comando")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Descripción")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Ejemplo")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git config")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Establece la identidad de usuario (nombre y email) para todos los repositorios ("),a("code",[t._v("--global")]),t._v(").")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v('git config --global user.name "Tu Nombre"')])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git init")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Inicializa un nuevo repositorio Git en el directorio actual.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git init")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git clone <URL>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Descarga una copia completa de un repositorio remoto a tu máquina.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git clone https://github.com/...")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git status")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Muestra el estado del directorio de trabajo y del área de preparación.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git status")])])])])]),t._v(" "),a("h3",{attrs:{id:"_2-2-flujo-de-trabajo-local-guardar-cambios"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-flujo-de-trabajo-local-guardar-cambios"}},[t._v("#")]),t._v(" 2.2. Flujo de Trabajo Local (Guardar Cambios)")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Comando")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Descripción")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Ejemplo")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git add <archivo>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Añade los cambios de un archivo al área de preparación ("),a("code",[t._v("staging area")]),t._v(").")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git add nuevo_archivo.txt")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git add .")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Añade todos los archivos modificados y no rastreados del directorio actual.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git add .")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v('git commit -m "msg"')])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Registra los cambios preparados en el historial del proyecto con un mensaje descriptivo.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v('git commit -m "Añadida función de login"')])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git diff")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Muestra las diferencias de los cambios no preparados.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git diff --staged")])])])])]),t._v(" "),a("h3",{attrs:{id:"_2-3-ramificacion-y-fusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-ramificacion-y-fusion"}},[t._v("#")]),t._v(" 2.3. Ramificación y Fusión")]),t._v(" "),a("p",[t._v("La ramificación es la clave para el desarrollo no lineal en equipo.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Comando")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Descripción")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Ejemplo")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git branch <nombre>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Crea una nueva rama local.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git branch feature-nueva")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git checkout <rama>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Cambia a la rama especificada, actualizando el directorio de trabajo.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git checkout feature-nueva")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git merge <rama>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Integra los cambios de la rama especificada en la rama actual. Puede requerir resolver conflictos.")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git merge feature-nueva")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git rebase")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Reorganiza la historia, moviendo los "),a("em",[t._v("commits")]),t._v(" de tu rama a la punta de otra para crear un historial lineal. "),a("strong",[t._v("No usar en ramas públicas")]),t._v(".")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git rebase master")])])])])]),t._v(" "),a("h3",{attrs:{id:"_2-4-historial-deshacer-y-remotos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-historial-deshacer-y-remotos"}},[t._v("#")]),t._v(" 2.4. Historial, Deshacer y Remotos")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Comando")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Descripción")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git log")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Muestra el historial de "),a("em",[t._v("commits")]),t._v(" de la rama actual.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git show <commit>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Muestra los detalles de un "),a("em",[t._v("commit")]),t._v(" específico.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git revert <hash>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Deshace un "),a("em",[t._v("commit")]),t._v(" creando un *"),a("em",[t._v("nuevo")]),t._v(" "),a("em",[t._v("commit")]),t._v(" inverso, preservando el historial.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git reset --hard HEAD")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Elimina todos los cambios no confirmados del directorio de trabajo y "),a("em",[t._v("staging area")]),t._v(". "),a("strong",[t._v("Pérdida de datos potencial")]),t._v(".")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git push <remoto> <rama>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Sube los "),a("em",[t._v("commits")]),t._v(" de tu rama local al repositorio remoto.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git fetch <remoto>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Descarga los cambios del remoto, pero "),a("strong",[t._v("sin fusionarlos")]),t._v(" con tu rama local.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("git pull <remoto> <rama>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Descarga y fusiona los cambios del repositorio remoto con tu rama local ("),a("code",[t._v("fetch")]),t._v(" + "),a("code",[t._v("merge")]),t._v(").")])])])]),t._v(" "),a("h2",{attrs:{id:"_3-github-para-la-colaboracion-y-flujos-de-trabajo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-github-para-la-colaboracion-y-flujos-de-trabajo"}},[t._v("#")]),t._v(" 3. GitHub para la Colaboración y Flujos de Trabajo")]),t._v(" "),a("p",[a("strong",[t._v("GitHub")]),t._v(" es la plataforma líder para el alojamiento de repositorios Git, actuando como un centro de colaboración y gestión de proyectos.")]),t._v(" "),a("h3",{attrs:{id:"_3-1-pull-requests-pr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-pull-requests-pr"}},[t._v("#")]),t._v(" 3.1. Pull Requests (PR)")]),t._v(" "),a("p",[t._v("Una "),a("strong",[t._v("Pull Request (PR)")]),t._v(" o Solicitud de Extracción es la herramienta de comunicación fundamental para proponer cambios y solicitar una revisión de código antes de que estos se fusionen con la rama principal.")]),t._v(" "),a("p",[t._v("El flujo de una PR implica:")]),t._v(" "),a("ol",[a("li",[t._v("Crear una rama local para el trabajo.")]),t._v(" "),a("li",[t._v("Subir los cambios a la rama remota.")]),t._v(" "),a("li",[t._v("Abrir la PR desde la interfaz de GitHub, seleccionando la rama de origen y la de destino (ej., "),a("code",[t._v("main")]),t._v(").")]),t._v(" "),a("li",[t._v("El equipo revisa, comenta y, si todo es correcto, "),a("strong",[t._v("fusiona")]),t._v(" ("),a("code",[t._v("merge")]),t._v(") la PR.")])]),t._v(" "),a("h3",{attrs:{id:"_3-2-fork-bifurcacion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-fork-bifurcacion"}},[t._v("#")]),t._v(" 3.2. Fork (Bifurcación)")]),t._v(" "),a("p",[t._v("Un "),a("strong",[t._v("Fork")]),t._v(" es una "),a("strong",[t._v("copia de un repositorio existente")]),t._v(" en tu propia cuenta de GitHub. Es esencial en proyectos de código abierto donde no tienes permisos de escritura directos, permitiéndote trabajar de forma independiente y proponer cambios al repositorio original a través de una Pull Request.")]),t._v(" "),a("h3",{attrs:{id:"_3-3-flujos-de-trabajo-comunes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-flujos-de-trabajo-comunes"}},[t._v("#")]),t._v(" 3.3. Flujos de Trabajo Comunes")]),t._v(" "),a("p",[t._v("Los "),a("strong",[t._v("flujos de trabajo")]),t._v(" son los acuerdos sobre cómo se utiliza Git para coordinar el trabajo en equipo.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("GitHub Flow")]),t._v(": Un flujo simple y ágil, donde la rama "),a("code",[t._v("main")]),t._v(" siempre está lista para desplegar en producción. Se basa en crear ramas de vida corta para cada nueva característica o corrección y fusionarlas en "),a("code",[t._v("main")]),t._v(" tras una Pull Request y su aprobación.")]),t._v(" "),a("li",[a("strong",[t._v("GitFlow")]),t._v(": Una metodología más estructurada, popular para proyectos con ciclos de desarrollo definidos. Utiliza dos ramas de larga vida: "),a("code",[t._v("master")]),t._v(" (producción estable) y "),a("code",[t._v("develop")]),t._v(" (integración de desarrollo activo), además de ramas temporales para "),a("code",[t._v("feature")]),t._v(", "),a("code",[t._v("release")]),t._v(" y "),a("code",[t._v("hotfix")]),t._v(".")])]),t._v(" "),a("h2",{attrs:{id:"_4-herramientas-complementarias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-herramientas-complementarias"}},[t._v("#")]),t._v(" 4. Herramientas Complementarias")]),t._v(" "),a("p",[t._v("Aunque la línea de comandos es la base, las herramientas gráficas pueden simplificar el manejo de Git:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Visual Studio Code (VS Code)")]),t._v(": Ofrece extensiones como "),a("strong",[t._v("Git Lens")]),t._v(" para ver la autoría por línea ("),a("code",[t._v("blame")]),t._v(") y "),a("strong",[t._v("Git Graph")]),t._v(" para visualizar el historial de "),a("em",[t._v("commits")]),t._v(" y ramas.")]),t._v(" "),a("li",[a("strong",[t._v("GitKraken")]),t._v(": Una herramienta GUI (Graphical User Interface) muy valorada que ofrece una interfaz visual e interactiva para gestionar ramas y "),a("em",[t._v("merges")]),t._v(", con soporte integrado para GitFlow.")]),t._v(" "),a("li",[a("strong",[t._v("GitHub Desktop")]),t._v(": El cliente gráfico oficial para Windows y Mac, simplifica las operaciones comunes de Git y el flujo de trabajo de GitHub.")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"tutoriales-y-enlaces-de-interes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tutoriales-y-enlaces-de-interes"}},[t._v("#")]),t._v(" Tutoriales y Enlaces de interés:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/joseluisgs/git-tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tutorial de Git y GitHub"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://education.github.com/git-cheat-sheet-education.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Cheat Sheet"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://scrum-master.es/virtualOS/otros/git",target:"_blank",rel:"noopener noreferrer"}},[t._v("Terminal Interactiva y Comandos de Git"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("Vídeo resumen del tema")])]),t._v(" "),a("p",{staticStyle:{"text-align":"center"}},[a("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/AuoiF7FX-XY",frameborder:"0",allowfullscreen:""}})]),t._v(" "),a("p",[a("strong",[t._v("Podcast del tema")])]),t._v(" "),a("p",{staticStyle:{"text-align":"center"}},[a("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/vwKtve3Hyeg",frameborder:"0",allowfullscreen:""}})]),t._v(" "),a("p",[a("strong",[t._v("Vídeo: Git: Ramas y Fusiones")])]),t._v(" "),a("p",{staticStyle:{"text-align":"center"}},[a("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/LkZIfBPgu40",frameborder:"0",allowfullscreen:""}})]),t._v(" "),a("p",[a("strong",[t._v("Vídeo: GitHub y Pull Requests")])]),t._v(" "),a("p",{staticStyle:{"text-align":"center"}},[a("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/IAtGf34X-Yo",frameborder:"0",allowfullscreen:""}})])])}),[],!1,null,null,null);e.default=o.exports}}]);