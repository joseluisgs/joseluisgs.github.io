(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{630:function(a,s,e){"use strict";e.r(s);var n=e(15),t=Object(n.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("Si hay algo de lo que he disfrutado desde hace mucho tiempo es del uso de las Corrutinas en Kotlin. Este a√±o he decidido explotar su uso en el backend y no puedo estar m√°s satisfecho: rapidez, sencillez y nuevas filosof√≠as de programaci√≥n f√°cilmente aplicables sin recurrir a otros recursos.")]),a._v(" "),e("h2",{attrs:{id:"corrutinas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#corrutinas"}},[a._v("#")]),a._v(" Corrutinas")]),a._v(" "),e("p",[a._v("Una "),e("a",{attrs:{href:"https://kotlinlang.org/docs/coroutines-overview.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("corrutina"),e("OutboundLink")],1),a._v(" es un hilo de ejecuci√≥n ligero que nos permite ejecutar c√≥digo de forma as√≠ncrona. De hecho su nombre viene de "),e("em",[a._v("rutina concurrente")]),a._v(". En Kotlin, las corrutinas son una forma de programaci√≥n as√≠ncrona/concurrente que nos permite simplificar el c√≥digo para que se vea y se escriba como si fuese secuencial.")]),a._v(" "),e("p",[a._v("No voy a entrar en detalles de c√≥mo funcionan las corrutinas, ya que hay muchos art√≠culos que lo explican muy bien: documentaci√≥n de "),e("a",{attrs:{href:"https://kotlinlang.org/docs/coroutines-overview.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Kotlin"),e("OutboundLink")],1),a._v(" o "),e("a",{attrs:{href:"https://www.baeldung.com/kotlin/coroutines",target:"_blank",rel:"noopener noreferrer"}},[a._v("Baeldung"),e("OutboundLink")],1),a._v(". Tampoco voy a explicar c√≥mo funcionan o "),e("a",{attrs:{href:"https://www.amazon.com/Kotlin-Coroutines-Tutorials-Second-Mastering/dp/1942878958",target:"_blank",rel:"noopener noreferrer"}},[a._v("se han implementado"),e("OutboundLink")],1),a._v(", porque no es es este el objetivo. En este art√≠culo voy a hablar de c√≥mo las corrutinas nos pueden ayudar a simplificar el c√≥digo as√≠ncrono y concurrente y qu√© me han ofrecido a nivel docente en mis m√≥dulos.")]),a._v(" "),e("p",[a._v("Pero entro  a describir sus caracter√≠sticas m√°s importantes:")]),a._v(" "),e("ul",[e("li",[a._v("Ligereza: Puedes ejecutar muchas corrutinas en un solo subproceso debido a la compatibilidad con la suspensi√≥n, que no bloquea el subproceso en el que se ejecuta la corrutina. La suspensi√≥n ahorra m√°s memoria que el bloqueo y admite muchas operaciones simult√°neas.")]),a._v(" "),e("li",[a._v("Menos fugas de memoria: Usa la simultaneidad estructurada para ejecutar operaciones dentro de un alcance.")]),a._v(" "),e("li",[a._v("Compatibilidad con cancelaci√≥n incorporada: Se propaga autom√°ticamente la cancelaci√≥n a trav√©s de la jerarqu√≠a de corrutinas en ejecuci√≥n.")])]),a._v(" "),e("h2",{attrs:{id:"funciones-de-suspension"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#funciones-de-suspension"}},[a._v("#")]),a._v(" Funciones de suspensi√≥n")]),a._v(" "),e("p",[a._v("una "),e("strong",[a._v("funci√≥n de suspensi√≥n")]),a._v(" e sun concepto clave que da forma a la filosof√≠a de la scorrutinas. Una funci√≥n de suspensi√≥n, es una funci√≥n que puede pausar su ejecuci√≥n. Cuando una funci√≥n de suspensi√≥n se suspende, la corrutina que la ejecuta se suspende y se puede reanudar en alg√∫n momento en el futuro. Las funciones de suspensi√≥n se marcan con la palabra clave suspend. ¬øQu√© significa todo esto? Cuando trabajamos con hilos, estos hilos tienen a bloquearse sobre todo al realizar operaciones de entrada y salida. Una corrutina est√° asociado a un hilo, pero no bloquea el hilo, sino que suspende la corrutina. Esto nos permite ejecutar muchas corrutinas en un solo hilo. Es decir, cuando una corrutina se suspende libera su hilo que puede ser utilizado por otra corrutina, cuando se reanuda la corrutina, el hilo se vuelve a ocupar, y no tiene por que ser el mismo hilo que estaba ocupado antes. Lo que ha hecho el equipo de Kotlin, es crear un hilo de ejecuci√≥n ligero que se puede suspender y reanudar sobre los hilos existentes utilizando ideas de programaci√≥n as√≠ncrona y concurrente conocidas como: callbacks, promesas, futures, pools, etc y mapeando los hilos ofrecidos por la JVM y el sistema para que se puedan utilizar de forma eficiente.")]),a._v(" "),e("p",{staticStyle:{"text-align":"center"}},[e("img",{staticStyle:{"border-radius":"0.25rem"},attrs:{loading:"lazy",src:"https://doordash.engineering/wp-content/uploads/2021/11/coroutine-11-1-1024x484.jpg",alt:"Imagen"}})]),a._v(" "),e("p",[a._v('Recuerda que los hilos son "caros", pues est√°n limitados por el n√∫mero de n√∫cleos de CPU y lo que te posibilite el sistema operativo. Todos tus servicios "compiten" por ellos. Gracias a las corrutinas, podemos aprovechar aprovechar mucho m√°s los recursos en backend al no ocupar tantos hilos. De hecho en una prueba de clase probamos a lanzar 13.000 hilos, el m√°ximo soportado por el sistema operativo de clase (Linux) y llegamos a m√°s de 1.500.000 de corrutinas sin tener problemas realizando la misma operaci√≥n. Esto ya es una ventaja considerable, aunque el valor depende de las operaciones a realizar.')]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[a._v('Este a√±o hemos aprendido lo que realmente significa bloquear ‚õî, a valorar los recursos compartidos, operaciones de entrada y salida, y comprender la importancia del cambio de contexto y que los recursos no son infinitos. Bienvenidos/as al mundo de la suspensi√≥n ‚úÖ.\nComo broma, te dir√© que nunca "suspender" ha tenido un significado tan positivo en clase üòÖ.')])]),e("h2",{attrs:{id:"concurrencia-estructurada"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrencia-estructurada"}},[a._v("#")]),a._v(" Concurrencia estructurada")]),a._v(" "),e("p",[a._v("Las corrutinas se mueven dentro de un alcance o "),e("a",{attrs:{href:"https://kotlinlang.org/docs/coroutines-basics.html#structured-concurrency",target:"_blank",rel:"noopener noreferrer"}},[a._v("scope"),e("OutboundLink")],1),a._v('. Cuando una corrutina se cancela, se cancelan todas las corrutinas que se est√°n ejecutando en el mismo alcance que la corrutina que se cancela. Siempre suelo poner la imagen de unas mu√±ecas Matrioska. Esto se conoce como concurrencia estructurada, evitando fugas de memoria, o que se queden elementos "zombies" en el sistema, todo un plus para el alumnado que ve que no crea fugas de memoria.')]),a._v(" "),e("p",{staticStyle:{"text-align":"center"}},[e("img",{staticStyle:{"border-radius":"0.25rem"},attrs:{loading:"lazy",src:"https://blendup.art/wp-content/uploads/2019/07/significado_tatuagem_matrioska_1-1024x576.jpg",alt:"Imagen"}})]),a._v(" "),e("h2",{attrs:{id:"mecanismos-de-sincronizacion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mecanismos-de-sincronizacion"}},[a._v("#")]),a._v(" Mecanismos de sincronizaci√≥n")]),a._v(" "),e("p",[a._v("Las corrutinas se pueden sincronizar de forma segura utilizando los mecanismos de sincronizaci√≥n de Kotlin. Esto nos permite sincronizar corrutinas de forma segura: tenemos los "),e("a",{attrs:{href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/",target:"_blank",rel:"noopener noreferrer"}},[a._v("sem√°foros"),e("OutboundLink")],1),a._v(" y "),e("a",{attrs:{href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/",target:"_blank",rel:"noopener noreferrer"}},[a._v("cerrojos"),e("OutboundLink")],1),a._v(" y otros elementos como canales. Por lo tanto podemos trabajar con ellas de una manera similar a como lo hemos hecho con los hilos protegiendo nuestras secciones cr√≠ticas.")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[a._v("Mecanismos de sincronizaci√≥n espec√≠ficos, muy similares a los que conoces en hilos, de hecho puedes incluso montarte monitores. Otra cosa es que los necesites. Ya lo ver√°s.")])]),e("h2",{attrs:{id:"async-y-await"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-y-await"}},[a._v("#")]),a._v(" Async y await")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://kotlinlang.org/docs/composing-suspending-functions.html#concurrent-using-async",target:"_blank",rel:"noopener noreferrer"}},[a._v("Async y await"),e("OutboundLink")],1),a._v(" son dos palabras clave que nos permiten trabajar con corrutinas de forma as√≠ncrona como si fuera secuencial ‚ù§Ô∏è. Async nos permite crear una corrutina que se ejecuta de forma as√≠ncrona y await nos permite esperar a que se complete la corrutina. Esto nos permite trabajar con corrutinas de forma as√≠ncrona, pero sin tener que lidiar con callbacks, promesas, etc. De hecho podemos incurso incorporar timeouts, etc. En el siguiente ejemplo podemos ver como se trabaja con async y await y lanzar varias peticiones concurrentes, y nos suspendemos para esperar sus resultado, si este no ha llegado:")]),a._v(" "),e("div",{staticClass:"language-kotlin line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-kotlin"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fun")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" runBlocking "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" time "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" measureTimeMillis "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" one "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" async "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("doSomethingUsefulOne")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" two "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" async "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("doSomethingUsefulTwo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"The answer is ')]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),e("span",{pre:!0,attrs:{class:"token expression"}},[a._v("one"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("await")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" two"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("await")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")])]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Completed in ')]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("$")]),e("span",{pre:!0,attrs:{class:"token expression"}},[a._v("time")])]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v(' ms"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[a._v("Sinceramente Async/Await ha sido un gran avance respecto al uso de Future/FutureCallable por su sencilles de implementaci√≥n en clase. de hecho el uso de Timeouts es una gran ventaja ‚úÖ.")])]),e("h2",{attrs:{id:"dispatchers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dispatchers"}},[a._v("#")]),a._v(" Dispatchers")]),a._v(" "),e("p",[a._v("Los "),e("a",{attrs:{href:"https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("dispatchers"),e("OutboundLink")],1),a._v(" son los encargados de ejecutar las corrutinas en un contexto. Por defecto, las corrutinas se ejecutan en el hilo que las lanza. Pero podemos cambiar el contexto y con ello el conjuntos de hilos en el que se ejecutan las corrutinas utilizando los dispatchers. De esta manera podemos asignar nuestro c√≥digo as√≠ncrono a un conjunto de workers o pool de hilos que se encargan de ejecutar las corrutinas optimizados para determinadas tareas/operaciones. Esto nos permite ejecutar corrutinas en hilos diferentes, y de esta manera aprovechar los recursos de forma eficiente. En el siguiente ejemplo podemos ver como se trabaja con dispatchers:")]),a._v(" "),e("div",{staticClass:"language-kotlin line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-kotlin"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fun")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" runBlocking "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" one "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("async")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Dispatchers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// eficiente en operaciones I/O")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[e("span",{pre:!0,attrs:{class:"token string"}},[a._v("\"I'm working in thread ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),e("span",{pre:!0,attrs:{class:"token expression"}},[a._v("Thread"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" two "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("async")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Dispatchers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Default"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// en el dispacher por defecto")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[e("span",{pre:!0,attrs:{class:"token string"}},[a._v("\"I'm working in thread ")]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),e("span",{pre:!0,attrs:{class:"token expression"}},[a._v("Thread"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name")]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"The answer is ')]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),e("span",{pre:!0,attrs:{class:"token expression"}},[a._v("one"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("await")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" two"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("await")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")])]),e("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("p",[a._v("Existen distintos tipos de "),e("a",{attrs:{href:"https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html#dispatchers-and-threads",target:"_blank",rel:"noopener noreferrer"}},[a._v("Dispacher"),e("OutboundLink")],1),a._v(" pre-establecidos, pero te recomiendo para el back usar IO (operaciones de entrada y salida), Default (para operaciones intensivas) o crearte tu propio hilo para ello.")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[a._v("El uso de Dispachers simplifica mucho c√≥mo y de qu√© manera vas a trabajar con los recursos. De hecho, gracias a ellos el alumnado ha aprendido a analizar sus tipos de operaciones, caracter√≠sticas para decidir cu√°l es el id√≥neo ‚úÖ.")])]),e("h2",{attrs:{id:"canales"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#canales"}},[a._v("#")]),a._v(" Canales")]),a._v(" "),e("p",[a._v("Si hay algo que me parece simple de usar para realizar coordinaci√≥n y sincronizaci√≥n son los "),e("a",{attrs:{href:"https://kotlinlang.org/docs/channels.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("canales"),e("OutboundLink")],1),a._v(". Similares a una Blockin Queue, pero con la ventaja de no bloquear, si no que se suspenden, siendo "),e("a",{attrs:{href:"https://kt.academy/article/cc-hot-cold",target:"_blank",rel:"noopener noreferrer"}},[a._v("Hot Streams"),e("OutboundLink")],1),a._v(".")]),a._v(" "),e("p",{staticStyle:{"text-align":"center"}},[e("img",{staticStyle:{"border-radius":"0.25rem"},attrs:{loading:"lazy",src:"https://miro.medium.com/max/786/1*0wWtCaRrUZ1DaYM8j25i3Q.webp",alt:"Imagen"}})]),a._v(" "),e("p",[a._v("Adem√°s, se pueden configurar de distinta manera para que su comportamiento sea el m√°s adecuado para nuestro caso de uso. Con ellos podemos crear productores y consumidores de informaci√≥n gracias a sus interfaces de SendChannel y ReceiveChannel, aplicar pipelines de procesamiento de datos, fan-in, fan-out, o bradcasting, etc.")]),a._v(" "),e("p",{staticStyle:{"text-align":"center"}},[e("img",{staticStyle:{"border-radius":"0.25rem"},attrs:{loading:"lazy",src:"https://jivimberg.io/images/posts/2019-04-18/Channels.gif",alt:"Imagen"}})]),a._v(" "),e("p",[a._v("En el siguiente ejemplo podemos ver como se trabaja con canales:")]),a._v(" "),e("div",{staticClass:"language-kotlin line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-kotlin"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fun")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" runBlocking "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" channel "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Channel"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("Int"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    \n    launch "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" channel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        channel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("close")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    launch "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("y "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" channel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n        "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br")])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[a._v("Los canales son una gran herramienta para coordinar y sincronizar tareas üëÆ. De hecho, gracias a ellos el alumnado ha aprendido a analizar sus tipos de operaciones, sincronizarlas, aprender a combinarlos sabiendo sus caracter√≠sticas ahorrando tiempo en creaci√≥n de monitores o similares ‚úÖ.")])]),e("h2",{attrs:{id:"flujos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flujos"}},[a._v("#")]),a._v(" Flujos")]),a._v(" "),e("p",[a._v("Pero sin duda, una de las cosas que me tiene enganchado son los flujos üë®üèª‚Äçüíª. Los "),e("a",{attrs:{href:"https://kotlinlang.org/docs/flow.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Flows"),e("OutboundLink")],1),a._v(" de Kotlin son una secuencia de valores que se emiten de forma as√≠ncrona, son "),e("a",{attrs:{href:"https://kt.academy/article/cc-hot-cold",target:"_blank",rel:"noopener noreferrer"}},[a._v("Cold Streams"),e("OutboundLink")],1),a._v(". Son similares a los observables de Rx (RxJs, RxJava), pero con la ventaja de que no son tan complejos de usar. Adem√°s, gracias a ello podemos realizar operaciones de transformaci√≥n, filtrado, mapeo, etc. de forma muy sencilla y siguiendo una api similar a las de las colecciones y secuencias.")]),a._v(" "),e("p",{staticStyle:{"text-align":"center"}},[e("img",{staticStyle:{"border-radius":"0.25rem"},attrs:{loading:"lazy",src:"https://developer.android.com/static/images/kotlin/flow/flow-entities.png",alt:"Imagen"}})]),a._v(" "),e("p",[a._v("El uso de Flows es muy realmente simple, solo tenemos que crear una funci√≥n que retorne un Flow y con ello se nos abre un mundo de posibilidades. El primero de ellos es la programaci√≥n reactiva. Ya que podemos conectarnos a una base de datos y emitir los datos que se van actualizando en tiempo real. Otro de sus usos es tener un stream de datos que se actualiza en tiempo real, como por ejemplo, un stream de datos de un sensor. Pero uno de los m√°s interesantes, es la posibilidad de tener un "),e("a",{attrs:{href:"https://developer.android.com/kotlin/flow/stateflow-and-sharedflow",target:"_blank",rel:"noopener noreferrer"}},[a._v("estado"),e("OutboundLink")],1),a._v(" "),e("a",{attrs:{href:"https://www.kodeco.com/22030171-reactive-streams-on-kotlin-sharedflow-and-stateflow",target:"_blank",rel:"noopener noreferrer"}},[a._v("compartido y reactivo"),e("OutboundLink")],1),a._v(". De hecho su facilidad para acercarnos a la reactividad y estados compartidos, es lo que m√°s uso le hemos dado en para hacer servicios reactivos que acceden a datos.")]),a._v(" "),e("div",{staticClass:"language-kotlin line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-kotlin"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fun")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" runBlocking "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" flow "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" flow "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("delay")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("emit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    launch "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        flow"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("collect")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" value "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br")])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[a._v("Los flujos han abierto la puerta a que apliquemos otras formas de programaci√≥n, como la reactiva, y nos han permitido crear servicios reactivos o estados compartidos de una forma simple y sin recurrir a recursos externos ‚úÖ.")])]),e("h2",{attrs:{id:"otras-aplicaciones"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#otras-aplicaciones"}},[a._v("#")]),a._v(" Otras aplicaciones")]),a._v(" "),e("p",[a._v("No voy a entrar en otras aplicaciones con corrutinas, porque hay bastantes, ni de otros frameworks que hacen uso de ellas como "),e("a",{attrs:{href:"https://ktor.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Ktor"),e("OutboundLink")],1),a._v(", o la programaci√≥n de "),e("a",{attrs:{href:"https://ktor.io/docs/servers-raw-sockets.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("sockets"),e("OutboundLink")],1),a._v(" no bloqueantes. Pero he disfrutado mucho haciendo un servicio de chat reactivo con una cach√© de mensajes compartida. De hecho montarlo ha supuesto muchas menos l√≠neas de c√≥digo y mucha menos complejidad que hacerlo con otras alternativas en Java.")]),a._v(" "),e("p",[a._v("De la misma manera se pueden aplicar con Spring para construir servicios reactivos ya sea con SQL o NoSQL con muy buenos resultados.")]),a._v(" "),e("h2",{attrs:{id:"conclusiones"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conclusiones"}},[a._v("#")]),a._v(" Conclusiones")]),a._v(" "),e("p",[a._v("Yo ya hab√≠a trabajado con las corrutinas en desarrollo m√≥vil, pero ha sido este a√±o cuando he decidido dar el salto con ella en mis m√≥dulos de segundo de DAM como son Acceso a Datos y Programaci√≥n de Servicios y Procesos. Creo que ha sido un gran acierto su incorporaci√≥n en el Backend como complemento a los hilos y todo lo relacionado con ellos: Futures, monitores, sem√°foros, etc.")]),a._v(" "),e("p",[a._v("Sin duda, las corrutinas son una herramienta muy potente y que nos permite hacer c√≥digo m√°s limpio y mantenible y legible y nos abre las puertas a que f√°cilmente programemos siguiendo otras filosof√≠as sin necesidad de instalar librer√≠as externas pues nos ofrecen todo para ello.")]),a._v(" "),e("p",[a._v("Como he dicho, no es un art√≠culo para explicarte c√≥mo funcionan, pero s√≠ para mostrarte sus ventajas a nivel docente y en el back. Tambi√©n te recomiendo que le eches un vistazo al blog de "),e("a",{attrs:{href:"https://elizarov.medium.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Roman Elizarov, Project Lead for the Kotlin Programming Language de JetBrains"),e("OutboundLink")],1),a._v(" donde comenta muchos aspectos interesantes de c√≥mo est√° hecho Kotlin por dentro y las Corrutinas.")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"},[e("span",{staticClass:"iconify",attrs:{"data-icon":"logos:kotlin-icon"}}),a._v(" Pon una corrutina en tu vida y ver√°s como todo cambia")]),e("p",[a._v("Bienvenido/a al mundo de las suspensi√≥n, de la concurrencia y de la programaci√≥n reactiva. Bienvenido/a al mundo de las corrutinas.")]),a._v(" "),e("p",[a._v("Puedes ver distintos ejemplos de su uso en los apuntes de mis m√≥dulos y pr√°cticas disponibles en "),e("span",{staticClass:"iconify",attrs:{"data-icon":"mdi:github"}}),a._v(" "),e("a",{attrs:{href:"https://github.com/joseluisgs",target:"_blank",rel:"noopener noreferrer"}},[a._v("Github"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=t.exports}}]);